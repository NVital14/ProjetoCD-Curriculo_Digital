/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package curriculumdigital.gui;

import blockchain.utils.Block;
import blockchain.utils.BlockChain;
import blockchain.utils.GuiUtils;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import curriculumdigital.core.Curriculo;
import curriculumdigital.core.Submission;
import curriculumdigital.core.User;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.IOException;
import java.rmi.RemoteException;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;
import p2p.IremoteP2P;
import p2p.OremoteP2P;
import p2p.P2Plistener;

/**
 *
 * @author noemi
 */
public class GUI extends javax.swing.JFrame implements P2Plistener {

    public static String fileCurriculo = "curriculo.obj";
    Curriculo curriculo;
    List<Submission> elements = new ArrayList();
    User myUser;
    OremoteP2P myRemoteObject;

    /**
     * Creates new form Interface
     */
    public GUI() {
        initComponents();
        setTitle("Curriculum Digital");
        try {

            File file = new File("blockchainfiles", fileCurriculo);

            if (file.exists()) {
//                curriculo = Curriculo.load(fileCurriculo);
//                elements.addAll(curriculo.submissions);
                String txt = "";
                List<Submission> tr = myRemoteObject.getSubmissions();
                for (Submission s : tr) {
                    txt += s.getUser() + " --> " + s.getName() + " - " + s.getEvent() + "\n";
                }
                txtListSubmissions.setText(txt);
//                txtCV.setText(elements.toString());
//                curriculo.submissions.clear();
                //textAreaCVAll.setText(curriculo.loadPersonEvents(null, true));
                textAreaCVAll.setText(myRemoteObject.getBlockchainSubmissions().toString());
            } else {
                curriculo = new Curriculo();
            }
        } catch (Exception e) {
            System.out.print(e);
        }
        setSize(800, 500);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent we) {
                try {
                    if (myRemoteObject.getSubmissionsSize() > 0 && myRemoteObject.getNetwork().size() == 1) {
                        new Thread(() -> {
                            try {
                                //fazer um bloco
                                List<Submission> blockSubmissions = myRemoteObject.getSubmissions();
                                if (blockSubmissions.size() < 0) {
                                    return;
                                }
                                Block b = new Block(myRemoteObject.getBlockchainLastHash(), blockSubmissions);
                                //remover as transacoes
                                myRemoteObject.removeSubmissions(blockSubmissions);
                                //minar o bloco
                                int zeros = 4;
                                int nonce = myRemoteObject.mine(b.getMinerData(), zeros);
                                //atualizar o nonce
                                b.setNonce(nonce, zeros);
                                //adiconar o bloco
                                myRemoteObject.addBlock(b);

                            } catch (Exception ex) {
                                onException(ex, "Start ming");
                                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }).start();
                    }
                } catch (RemoteException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                System.exit(0);
            }
        });
    }

    public GUI(User u, OremoteP2P remote) {
        this.myRemoteObject = remote;
        this();
        this.myUser = u;
        this.txtInstitute.setText(u.getName());

        if (!u.isInstitute()) {
            // Remover o Tab "Curriculum" para utilizadores nÃ£o institucionais
            App.remove(Curriculum); // Remove a aba do Curriculum
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        App = new javax.swing.JTabbedPane();
        Curriculum = new javax.swing.JPanel();
        lbCurriculum = new javax.swing.JLabel();
        ScrollInstitute = new javax.swing.JScrollPane();
        txtInstitute = new javax.swing.JTextField();
        ScrollName = new javax.swing.JScrollPane();
        txtName = new javax.swing.JTextField();
        ScrollEvent = new javax.swing.JScrollPane();
        txtEvent = new javax.swing.JTextArea();
        btnAdd = new javax.swing.JButton();
        ScrollCV = new javax.swing.JScrollPane();
        txtListSubmissions = new javax.swing.JTextArea();
        ListaPessoas = new javax.swing.JPanel();
        btnPersonCV = new javax.swing.JButton();
        txtNameCV = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        textAreaCVPerson = new javax.swing.JTextArea();
        lbSearchCurriculum = new javax.swing.JLabel();
        ListaCurriculum = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaCVAll = new javax.swing.JTextArea();
        lbAllCurriculum = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lbCurriculum.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lbCurriculum.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbCurriculum.setText("Curriculum Digital");

        ScrollInstitute.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        txtInstitute.setEditable(false);
        txtInstitute.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Instituto", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        ScrollInstitute.setViewportView(txtInstitute);

        ScrollName.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        txtName.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Nome", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        ScrollName.setViewportView(txtName);

        ScrollEvent.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        ScrollEvent.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        txtEvent.setColumns(20);
        txtEvent.setLineWrap(true);
        txtEvent.setRows(5);
        txtEvent.setWrapStyleWord(true);
        txtEvent.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Evento", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        ScrollEvent.setViewportView(txtEvent);

        btnAdd.setText("Adicionar");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        ScrollCV.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        txtListSubmissions.setEditable(false);
        txtListSubmissions.setColumns(20);
        txtListSubmissions.setLineWrap(true);
        txtListSubmissions.setRows(5);
        txtListSubmissions.setWrapStyleWord(true);
        ScrollCV.setViewportView(txtListSubmissions);

        javax.swing.GroupLayout CurriculumLayout = new javax.swing.GroupLayout(Curriculum);
        Curriculum.setLayout(CurriculumLayout);
        CurriculumLayout.setHorizontalGroup(
            CurriculumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lbCurriculum, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(CurriculumLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(CurriculumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btnAdd, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE)
                    .addComponent(ScrollInstitute, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ScrollName)
                    .addComponent(ScrollEvent))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addComponent(ScrollCV, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38))
        );
        CurriculumLayout.setVerticalGroup(
            CurriculumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CurriculumLayout.createSequentialGroup()
                .addComponent(lbCurriculum, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addGroup(CurriculumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CurriculumLayout.createSequentialGroup()
                        .addComponent(ScrollInstitute, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ScrollName, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ScrollEvent, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(ScrollCV, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(225, 225, 225))
        );

        App.addTab("Curriculum", Curriculum);

        btnPersonCV.setText("Procurar");
        btnPersonCV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPersonCVActionPerformed(evt);
            }
        });

        txtNameCV.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Nome da Pessoa", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        textAreaCVPerson.setEditable(false);
        textAreaCVPerson.setColumns(20);
        textAreaCVPerson.setLineWrap(true);
        textAreaCVPerson.setRows(5);
        textAreaCVPerson.setWrapStyleWord(true);
        jScrollPane2.setViewportView(textAreaCVPerson);

        lbSearchCurriculum.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lbSearchCurriculum.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbSearchCurriculum.setText("Procurar Curriculum");

        javax.swing.GroupLayout ListaPessoasLayout = new javax.swing.GroupLayout(ListaPessoas);
        ListaPessoas.setLayout(ListaPessoasLayout);
        ListaPessoasLayout.setHorizontalGroup(
            ListaPessoasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ListaPessoasLayout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(ListaPessoasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtNameCV, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                    .addComponent(btnPersonCV, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(72, 72, 72)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(lbSearchCurriculum, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
        );
        ListaPessoasLayout.setVerticalGroup(
            ListaPessoasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ListaPessoasLayout.createSequentialGroup()
                .addComponent(lbSearchCurriculum, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ListaPessoasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ListaPessoasLayout.createSequentialGroup()
                        .addGap(112, 112, 112)
                        .addComponent(txtNameCV, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnPersonCV, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(270, Short.MAX_VALUE))
        );

        App.addTab("Lista Pessoas", ListaPessoas);

        textAreaCVAll.setEditable(false);
        textAreaCVAll.setColumns(20);
        textAreaCVAll.setLineWrap(true);
        textAreaCVAll.setRows(5);
        textAreaCVAll.setWrapStyleWord(true);
        jScrollPane1.setViewportView(textAreaCVAll);

        lbAllCurriculum.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lbAllCurriculum.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbAllCurriculum.setText("Todos os Curriculums");

        javax.swing.GroupLayout ListaCurriculumLayout = new javax.swing.GroupLayout(ListaCurriculum);
        ListaCurriculum.setLayout(ListaCurriculumLayout);
        ListaCurriculumLayout.setHorizontalGroup(
            ListaCurriculumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ListaCurriculumLayout.createSequentialGroup()
                .addGap(91, 91, 91)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 610, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(99, Short.MAX_VALUE))
            .addComponent(lbAllCurriculum, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
        );
        ListaCurriculumLayout.setVerticalGroup(
            ListaCurriculumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ListaCurriculumLayout.createSequentialGroup()
                .addComponent(lbAllCurriculum, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(270, Short.MAX_VALUE))
        );

        App.addTab("Lista Curriculum", ListaCurriculum);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Block Data"));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setBorder(javax.swing.BorderFactory.createTitledBorder("Header"));
        jScrollPane3.setViewportView(jTextArea1);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jTextArea2.setBorder(javax.swing.BorderFactory.createTitledBorder("Transactions"));
        jScrollPane4.setViewportView(jTextArea2);

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane5.setViewportView(jList1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 366, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(15, 15, 15))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                    .addComponent(jScrollPane4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(264, Short.MAX_VALUE))
        );

        App.addTab("Blockchain", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(App, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(App)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPersonCVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPersonCVActionPerformed
        try {
            textAreaCVPerson.setText("");
            String s = curriculo.loadPersonEvents(txtNameCV.getText(), false);
            if (!"".equals(s)) {
                textAreaCVPerson.setText(s);
            } else if ("".equals(txtNameCV.getText())) {
                JOptionPane.showMessageDialog(this, "Coloca o nome da pessoa que queres procurar.", "Coloca o nome!", JOptionPane.ERROR_MESSAGE);
            } else {
                // Mostra uma mensagem de erro no caso de nÃ£o haver essa pessoa
                JOptionPane.showMessageDialog(this, "NÃ£o existem currÃ­culos dessa pessoa.", "NÃ£o existe!", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnPersonCVActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed

//        btnAdd.setEnabled(false);
        System.out.println("Inicio");
        try {
            // Verifica se o utilizador Ã© uma instituiÃ§Ã£o
            if (myUser.isInstitute()) {
                // cria uma submissÃ£o 
                Submission s = new Submission(
                        myUser,
                        txtName.getText(),
                        txtEvent.getText()
                );

                // Adiciona a submissÃ£o ao currÃ­culo e atualiza o campo de texto
                myRemoteObject.addSubmission(s);

                System.out.println("Registei a submissÃ£o: " + s.getName() + " - " + s.getEvent());

            } else {
                // Mostra uma mensagem de erro caso o utilizador nÃ£o seja uma instituiÃ§Ã£o
                JOptionPane.showMessageDialog(this, "Apenas InstituiÃ§Ãµes podem adicionar submissÃµes.", "Acesso Negado", JOptionPane.WARNING_MESSAGE);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
//        try {
//            String txt = "";
//            for (Submission s : myRemoteObject.getSubmissions()) {
//                txt += s.getUser() + " --> " + s.getName() + " - " + s.getEvent() + "\n";
//            }
//            txtCV.setText(txt);
//        } catch (RemoteException ex) {
//            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
//        }
        System.out.println("Antes da thread");
        try {
            if (myRemoteObject.getSubmissionsSize() == 4) {
                new Thread(() -> {
                    try {
                        System.out.println("Dentro da thread");
                        //fazer um bloco
                        List<Submission> blockSubmissions = myRemoteObject.getSubmissions();
                        if (blockSubmissions.size() < 0) {
                            return;
                        }
                        Block b = new Block(myRemoteObject.getBlockchainLastHash(), blockSubmissions);
                        //remover as transacoes
                        myRemoteObject.removeSubmissions(blockSubmissions);
                        //minar o bloco
                        int zeros = 4;
                        int nonce = myRemoteObject.mine(b.getMinerData(), zeros);
                        //atualizar o nonce
                        b.setNonce(nonce, zeros);
                        //adiconar o bloco
                        myRemoteObject.addBlock(b);
                        SwingUtilities.invokeLater(() -> {
                            btnAdd.setEnabled(true);
                        });

                    } catch (Exception ex) {
                        onException(ex, "Start ming");
                        Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    SwingUtilities.invokeLater(() -> {
                        try {
                            txtListSubmissions.setText(myRemoteObject.getSubmissions().toString());
                        } catch (RemoteException ex) {
                            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        btnAdd.setEnabled(true);
                    });
                    System.out.println("Acabou thread");
                }).start();
            }
        } catch (RemoteException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_btnAddActionPerformed
    static DateTimeFormatter hfmt = DateTimeFormatter.ofPattern("HH:mm:ss.SSS");

    @Override
    public void onMessage(String title, String message) {
        //GuiUtils.addText(txtServerLog, title, message);
//        tpMain.setSelectedComponent(pnServer);
    }

    @Override
    public void onException(Exception e, String title) {
//        txtTimeLog.setText(LocalTime.now().format(hfmt));
//        txtExceptionLog.setForeground(new java.awt.Color(255, 0, 0));
//        txtExceptionLog.setText(e.getMessage());
//        txtTitleLog.setText(title);
        // JOptionPane.showMessageDialog(this, e.getMessage(), title, JOptionPane.WARNING_MESSAGE);
    }

    @Override
    public void onStartRemote(String message) {
//        setTitle(message);
//        imgServerRunning.setEnabled(true);
//        btStartServer.setEnabled(false);
//        GuiUtils.addText(txtServerLog, "Start server", message);

    }

    @Override
    public void onConect(String address) {
//        try {
//            List<IremoteP2P> net = myRemoteObject.getNetwork();
//            String txt = "";
//            for (IremoteP2P iremoteP2P : net) {
//                txt += iremoteP2P.getAdress() + "\n";
//            }
//            txtNetwork.setText(txt);
////            tpMain.setSelectedComponent(pnNetwork);
//        } catch (RemoteException ex) {
//            onException(ex, "On conect");
//            Logger.getLogger(Authentication.class.getName()).log(Level.SEVERE, null, ex);
//        }

    }

    @Override
    public void onBlockchainUpdate(BlockChain b) {
        SwingUtilities.invokeLater(() -> {
            DefaultListModel model = new DefaultListModel();
            for (int i = b.getSize() - 1; i >= 0; i--) {
                model.addElement(b.get(i));
            }
//            lstBlcockchain.setModel(model);
//            lstBlcockchain.setSelectedIndex(0);
//            tpMain.setSelectedComponent(pnBlockchain);
//            repaint();
        });
    }

    @Override
    public void onSubmission(String transaction) {
        try {
            onMessage("Transaction ", transaction);
            String txt = "";
            List<Submission> tr = myRemoteObject.getSubmissions();
            for (Submission s : tr) {
                txt += s.getUser() + " --> " + s.getName() + " - " + s.getEvent() + "\n";
            }
            txtListSubmissions.setText(txt);
//            tpMain.setSelectedComponent(pnTransaction);
        } catch (RemoteException ex) {
            onException(ex, "on transaction");
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public void onStartMining(String message, int zeros) {
        SwingUtilities.invokeLater(() -> {
//            tpMain.setSelectedComponent(pnTransaction);
//            btMining.setEnabled(false);
//            lblMining.setVisible(true);
//            lblWinner.setVisible(false);
//            txtLogMining.setText("[START]" + message + "[" + zeros + "]\n");
//            lblMining.setText("mining " + zeros + " zeros");
//            repaint();
        });
    }

    @Override
    public void onStopMining(String message, int nonce) {
        SwingUtilities.invokeLater(() -> {
//            txtLogMining.setText("[STOP]" + message + "[" + nonce + "]\n" + txtLogMining.getText());
//            lblMining.setVisible(false);
//            tpMain.setSelectedComponent(pnTransaction);
//            btMining.setEnabled(true);
//            txtLogMining.setText("Nounce Found [" + nonce + "]\n" + txtLogMining.getText());
//            System.out.println(" NONCE " + nonce + "\t" + message);
//            repaint();
        });
    }

    @Override
    public void onNounceFound(String message, int nonce) {
        try {
            myRemoteObject.stopMining(nonce);
        } catch (RemoteException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        SwingUtilities.invokeLater(() -> {
//            txtLogMining.setText("Nounce Found [" + nonce + "]\n" + txtLogMining.getText());
//            lblMining.setVisible(false);
//            lblWinner.setText(message);
//            lblWinner.setVisible(true);
//            tpMain.setSelectedComponent(pnTransaction);
//            txtTitleLog.setText(Miner.getHash(myremoteObject.myMiner.getMessage(), myremoteObject.myMiner.getNonce()));
//            repaint();
//            System.out.println(" NONCE " + nonce + "\t" + message);
        });

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane App;
    private javax.swing.JPanel Curriculum;
    private javax.swing.JPanel ListaCurriculum;
    private javax.swing.JPanel ListaPessoas;
    private javax.swing.JScrollPane ScrollCV;
    private javax.swing.JScrollPane ScrollEvent;
    private javax.swing.JScrollPane ScrollInstitute;
    private javax.swing.JScrollPane ScrollName;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnPersonCV;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JLabel lbAllCurriculum;
    private javax.swing.JLabel lbCurriculum;
    private javax.swing.JLabel lbSearchCurriculum;
    private javax.swing.JTextArea textAreaCVAll;
    private javax.swing.JTextArea textAreaCVPerson;
    private javax.swing.JTextArea txtEvent;
    private javax.swing.JTextField txtInstitute;
    private javax.swing.JTextArea txtListSubmissions;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtNameCV;
    // End of variables declaration//GEN-END:variables
}
